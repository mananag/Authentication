{"version":3,"sources":["queries/CurrentUser.js","mutations/logout.js","components/Header.js","mutations/login.js","components/Login.js","mutations/singup.js","components/SignUp.js","components/requireAuth.js","App.js","reportWebVitals.js","index.js"],"names":["gql","Header","props","useQuery","CurrentUser","loading","error","data","useMutation","mutation","logout","onLogoutClick","refetchQueries","query","className","to","user","onClick","Login","useState","email","setEmail","password","setPassword","setError","history","useHistory","login","check","onSubmit","e","preventDefault","variables","then","r","push","catch","console","log","type","id","name","value","onChange","target","htmlFor","style","color","data-error","SignUp","signup","required","WrappedComponent","RequireAuth","link","createHttpLink","uri","credentials","client","ApolloClient","cache","InMemoryCache","Dashboard","App","path","exact","requireAuth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9fad487.chunk.js","sourcesContent":["import {gql} from '@apollo/client'\r\n\r\nexport default gql`\r\n    {\r\n        user {\r\n            id\r\n            email\r\n        }\r\n    }\r\n`\r\n","import {gql} from '@apollo/client'\r\n\r\nexport default gql`\r\n    mutation {\r\n        logout{\r\n            id\r\n            email\r\n        }\r\n    }\r\n`\r\n","import CurrentUser from \"../queries/CurrentUser\";\r\nimport {useMutation, useQuery} from \"@apollo/client\";\r\nimport {Link} from \"react-router-dom\";\r\nimport query from \"../queries/CurrentUser\"\r\nimport mutation from \"../mutations/logout\";\r\n\r\nconst Header = (props) => {\r\n    const {loading, error, data} = useQuery(CurrentUser)\r\n    const [logout] = useMutation(mutation)\r\n\r\n    const onLogoutClick = () => {\r\n        logout({\r\n            refetchQueries: [{query: query}]\r\n        })\r\n    }\r\n\r\n    const renderButtons = () => {\r\n        if (loading) return <div>Loading</div>\r\n\r\n        if(data.user){\r\n            return <li><a onClick={onLogoutClick}>Logout</a></li>\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <li>\r\n                        <Link to={'/login'}>\r\n                            Log In\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to={'/signup'}>\r\n                            Sign Up\r\n                        </Link>\r\n                    </li>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    // console.log(data)\r\n    if (error) return <div>Loading</div>\r\n    return(\r\n        <nav>\r\n            <div className={'nav-wrapper'}>\r\n                <Link to={'/'} className={'brand-logo left'} >Home</Link>\r\n                <ul className={'right'}>\r\n                    {renderButtons()}\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import {gql} from '@apollo/client'\r\n\r\nexport default gql`\r\n    mutation Login($email: String!, $password: String!){\r\n        login(email: $email, password: $password) {\r\n            id\r\n            email\r\n        }\r\n    }\r\n`\r\n","import mutation from \"../mutations/login\";\r\nimport {useMutation, useQuery} from \"@apollo/client\";\r\nimport {useState} from \"react\";\r\nimport {useHistory, Redirect} from \"react-router-dom\";\r\nimport CurrentUser from \"../queries/CurrentUser\";\r\n\r\nconst Login = () => {\r\n    // let email = ''\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [error, setError] = useState('')\r\n\r\n    const history = useHistory()\r\n\r\n    const {data } = useQuery(CurrentUser)\r\n    const [login] = useMutation(mutation)\r\n\r\n    const check = (data) => {\r\n        if (data.user){\r\n            return <Redirect to={\"/\"} />\r\n        }else{\r\n\r\n        }\r\n    }\r\n\r\n    const  onSubmit = (e) => {\r\n        e.preventDefault()\r\n        login({\r\n            variables: {email, password},\r\n            refetchQueries: [{query: CurrentUser}]\r\n        }).then(r => {\r\n            history.push('/')\r\n        }).catch(e => {\r\n            if (e){\r\n                setError(\"Invalid Credentials\")\r\n                console.log()\r\n            }\r\n        })\r\n    }\r\n    return(\r\n        <div className={'row'}>\r\n            {check(data)}\r\n            <form className={'col s4'} onSubmit={onSubmit} >\r\n                <h3>\r\n                    Login\r\n                </h3>\r\n                <div className={'input-field'}>\r\n                    <input className={error && \"invalid\"} type={'text'}  id={'email'} name={'email'} value={email}\r\n                           onChange={e => setEmail(e.target.value)}/>\r\n                    <label htmlFor={'email'}>Email</label>\r\n                </div>\r\n                <div className={'input-field'}>\r\n                    <input className={error && \"invalid\"} type={'password'} value={password} id={'password'}\r\n                           onChange={e => setPassword(e.target.value)}/>\r\n                    <label htmlFor={'password'}>Password</label>\r\n                    <span className=\"helper-text\" style={{color: 'red'}} data-error=\"Invalid Credentials\">{error}</span>\r\n\r\n                </div>\r\n                <button className={'btn'} type={'submit'}>\r\n                    Login\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import {gql} from '@apollo/client'\r\n\r\nexport default gql`\r\n    mutation SignUp($email: String!, $password: String!){\r\n        signup(email: $email, password: $password) {\r\n            id\r\n            email\r\n        }\r\n    }\r\n`\r\n","import {useMutation, useQuery} from \"@apollo/client\";\r\nimport mutation from \"../mutations/singup\";\r\nimport query from \"../queries/CurrentUser\";\r\nimport {useState} from \"react\";\r\nimport {Redirect, useHistory} from \"react-router-dom\";\r\nimport CurrentUser from \"../queries/CurrentUser\";\r\n\r\nconst SignUp = () => {\r\n    // let email = ''\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [error, setError] = useState('')\r\n\r\n    const history = useHistory()\r\n\r\n    const {data} = useQuery(CurrentUser)\r\n    const [signup] = useMutation(mutation)\r\n\r\n    const check = (data) => {\r\n        if (data.user){\r\n            return <Redirect to={\"/\"} />\r\n        }else{\r\n\r\n        }\r\n    }\r\n\r\n    const  onSubmit = (e) => {\r\n        e.preventDefault()\r\n        signup({\r\n            variables: {email, password},\r\n            refetchQueries: [{query: CurrentUser}]\r\n        }).then(r => {\r\n            history.push('/')\r\n        }).catch(e => {\r\n            if (e){\r\n                setError(\"Email Address already Existed\")\r\n                console.log(e)\r\n            }\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div className={'row'}>\r\n            {check(data)}\r\n\r\n            <form className={'col s4'} onSubmit={onSubmit} >\r\n                <h3>\r\n                    Create New Account\r\n                </h3>\r\n                <div className={'input-field'}>\r\n                    <input className={error && \"invalid\"} type={'email'}\r\n                           id={'email'} name={'email'} value={email} required\r\n                           onChange={e => setEmail(e.target.value)}/>\r\n                    <label htmlFor={'email'}>Email</label>\r\n                </div>\r\n                <div className={'input-field'}>\r\n                    <input className={error && \"invalid\"} type={'password'} value={password} id={'password'}\r\n                           onChange={e => setPassword(e.target.value)}/>\r\n                    <label htmlFor={'password'}>Password</label>\r\n                    <span className=\"helper-text\" style={{color: 'red'}} data-error=\"Invalid Credentials\">{error}</span>\r\n\r\n                </div>\r\n                <button className={'btn'} type={'submit'}>\r\n                    Create Account\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUp\r\n","import CurrentUser from \"../queries/CurrentUser\";\r\nimport {useQuery} from \"@apollo/client\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport default (WrappedComponent) => {\r\n    const RequireAuth = (props) => {\r\n        const {loading, data} = useQuery(CurrentUser)\r\n\r\n        if (loading){\r\n            return <div>Loading</div>\r\n        }\r\n\r\n        if(data.user){\r\n            return <WrappedComponent {...props} />\r\n        }else{\r\n            return <Redirect to={'login'} />\r\n        }\r\n\r\n    }\r\n\r\n    return <RequireAuth />\r\n}\r\n","import {ApolloProvider, ApolloClient, InMemoryCache, createHttpLink} from \"@apollo/client\";\nimport {HashRouter , Route, Switch} from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport Login from \"./components/Login\";\nimport SignUp from \"./components/SignUp\";\nimport requireAuth from \"./components/requireAuth\";\n\n\nconst link = createHttpLink({\n    uri: 'https://qraphql-authentication.herokuapp.com/graphql',\n    credentials: 'include'\n});\nconst client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link\n})\n\nconst Dashboard = () => {\n    return(\n        <div>\n            You are logged in!!\n        </div>\n    )\n}\n\nfunction App() {\n  return (\n      <ApolloProvider client = {client}>\n          <HashRouter>\n\n              <Route path={'/'}>\n                  <Header />\n              </Route>\n              <Switch>\n                  <Route exact path={'/dashboard'}>\n                      {requireAuth(Dashboard)}\n                  </Route>\n                  <Route path={\"/login\"}>\n                      <Login />\n                  </Route>\n                  <Route path={\"/signup\"}>\n                      <SignUp />\n                  </Route>\n              </Switch>\n          </HashRouter>\n      </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your client, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}